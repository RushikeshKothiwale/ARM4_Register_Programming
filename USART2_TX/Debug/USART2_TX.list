
USART2_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000470  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000470  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000528  00000000  00000000  000104e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000160  00000000  00000000  00010a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004b  00000000  00000000  00010be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001899a  00000000  00000000  00010c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006b9  00000000  00000000  000295c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a9e5  00000000  00000000  00029c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000010c  00000000  00000000  000b4664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b4770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000440 	.word	0x08000440

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000440 	.word	0x08000440

08000204 <USART2_init>:

void Send_String(char *ch);

void Timer_Precise_Delay(int delay);

void USART2_init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);// Enable the clock for GPIOA for PA2_TX
 8000208:	4b34      	ldr	r3, [pc, #208]	; (80002dc <USART2_init+0xd8>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a33      	ldr	r2, [pc, #204]	; (80002dc <USART2_init+0xd8>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	RCC->APB2ENR |= (1<<0);// Enable the clock for timer 1;
 8000214:	4b31      	ldr	r3, [pc, #196]	; (80002dc <USART2_init+0xd8>)
 8000216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000218:	4a30      	ldr	r2, [pc, #192]	; (80002dc <USART2_init+0xd8>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->PSC = 3999+1;
 8000220:	4b2f      	ldr	r3, [pc, #188]	; (80002e0 <USART2_init+0xdc>)
 8000222:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000226:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 15999+1;
 8000228:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <USART2_init+0xdc>)
 800022a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800022e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= (1<<0);
 8000230:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <USART2_init+0xdc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a2a      	ldr	r2, [pc, #168]	; (80002e0 <USART2_init+0xdc>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= (1<<17); // Enable the clock for USART2
 800023c:	4b27      	ldr	r3, [pc, #156]	; (80002dc <USART2_init+0xd8>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000240:	4a26      	ldr	r2, [pc, #152]	; (80002dc <USART2_init+0xd8>)
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOA->AFR[0] |= (1<<8);
 8000248:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <USART2_init+0xe0>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a25      	ldr	r2, [pc, #148]	; (80002e4 <USART2_init+0xe0>)
 800024e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <USART2_init+0xe0>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a22      	ldr	r2, [pc, #136]	; (80002e4 <USART2_init+0xe0>)
 800025a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 8000260:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <USART2_init+0xe0>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <USART2_init+0xe0>)
 8000266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800026a:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0] |= (1<<12);
 800026c:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <USART2_init+0xe0>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <USART2_init+0xe0>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000276:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<13);
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <USART2_init+0xe0>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <USART2_init+0xe0>)
 800027e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000282:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<14);
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <USART2_init+0xe0>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <USART2_init+0xe0>)
 800028a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800028e:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= (1<<5);
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <USART2_init+0xe0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <USART2_init+0xe0>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (1<<7);
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <USART2_init+0xe0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <USART2_init+0xe0>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x08b;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <USART2_init+0xe4>)
 80002aa:	228b      	movs	r2, #139	; 0x8b
 80002ac:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= (1<<3);
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <USART2_init+0xe4>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <USART2_init+0xe4>)
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<2);
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <USART2_init+0xe4>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <USART2_init+0xe4>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<13);
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <USART2_init+0xe4>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <USART2_init+0xe4>)
 80002cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d0:	60d3      	str	r3, [r2, #12]
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40010000 	.word	0x40010000
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40004400 	.word	0x40004400

080002ec <USART2_write>:


void USART2_write(int ch){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & (1<<7))){}
 80002f4:	bf00      	nop
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <USART2_write+0x2c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f9      	beq.n	80002f6 <USART2_write+0xa>

	USART2->DR = (ch & 0xFF);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <USART2_write+0x2c>)
 8000306:	b2db      	uxtb	r3, r3
 8000308:	6053      	str	r3, [r2, #4]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40004400 	.word	0x40004400

0800031c <Timer_Precise_Delay>:

void Timer_Precise_Delay(int delay){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]

	while(!(TIM1->SR & (1<<0))){}
 8000324:	bf00      	nop
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <Timer_Precise_Delay+0x30>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <Timer_Precise_Delay+0xa>
	TIM1->SR &= ~(1<<0);
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <Timer_Precise_Delay+0x30>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	4a05      	ldr	r2, [pc, #20]	; (800034c <Timer_Precise_Delay+0x30>)
 8000338:	f023 0301 	bic.w	r3, r3, #1
 800033c:	6113      	str	r3, [r2, #16]

}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40010000 	.word	0x40010000

08000350 <Send_String>:
	while(!(USART2->SR & (1<<5))){}
	return USART2->DR;

}

void Send_String(char *ch){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	while(*ch != '\0'){
 8000358:	e007      	b.n	800036a <Send_String+0x1a>
		USART2_write(*ch);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ffc4 	bl	80002ec <USART2_write>
		ch++;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3301      	adds	r3, #1
 8000368:	607b      	str	r3, [r7, #4]
	while(*ch != '\0'){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1f3      	bne.n	800035a <Send_String+0xa>
	}
}
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <main>:


int main(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0



	USART2_init();
 8000380:	f7ff ff40 	bl	8000204 <USART2_init>

	while(1){

		Send_String("ARM-CORTEX M4");
 8000384:	4806      	ldr	r0, [pc, #24]	; (80003a0 <main+0x24>)
 8000386:	f7ff ffe3 	bl	8000350 <Send_String>
		USART2_write('\r');
 800038a:	200d      	movs	r0, #13
 800038c:	f7ff ffae 	bl	80002ec <USART2_write>
		USART2_write('\n');
 8000390:	200a      	movs	r0, #10
 8000392:	f7ff ffab 	bl	80002ec <USART2_write>
		Timer_Precise_Delay(1000);
 8000396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039a:	f7ff ffbf 	bl	800031c <Timer_Precise_Delay>
		Send_String("ARM-CORTEX M4");
 800039e:	e7f1      	b.n	8000384 <main+0x8>
 80003a0:	08000458 	.word	0x08000458

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ffd1 	bl	800037c <main>

080003da <LoopForever>:

LoopForever:
  b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	2000001c 	.word	0x2000001c

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000468 	.word	0x08000468
 8000434:	08000468 	.word	0x08000468
 8000438:	08000468 	.word	0x08000468
 800043c:	0800046c 	.word	0x0800046c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

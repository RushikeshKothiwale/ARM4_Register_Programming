
Timer2_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000460  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000460  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005ad  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000135  00000000  00000000  00010a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00010b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  00010bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018994  00000000  00000000  00010c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005a1  00000000  00000000  00029594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a751  00000000  00000000  00029b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  000b42dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000440 	.word	0x08000440

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000440 	.word	0x08000440

08000204 <main>:
#include "stm32f446xx.h"

void delay();

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	int duty_cycle = 100;
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	607b      	str	r3, [r7, #4]
	int total_period = 1000;
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	603b      	str	r3, [r7, #0]

	RCC->AHB1ENR |= (1<<0);
 8000214:	4b55      	ldr	r3, [pc, #340]	; (800036c <main+0x168>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a54      	ldr	r2, [pc, #336]	; (800036c <main+0x168>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (1<<11);
 8000220:	4b53      	ldr	r3, [pc, #332]	; (8000370 <main+0x16c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a52      	ldr	r2, [pc, #328]	; (8000370 <main+0x16c>)
 8000226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1<<20);    // Select AF1 on PA5 Pin
 800022c:	4b50      	ldr	r3, [pc, #320]	; (8000370 <main+0x16c>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a4f      	ldr	r2, [pc, #316]	; (8000370 <main+0x16c>)
 8000232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000236:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<21);
 8000238:	4b4d      	ldr	r3, [pc, #308]	; (8000370 <main+0x16c>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a4c      	ldr	r2, [pc, #304]	; (8000370 <main+0x16c>)
 800023e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000242:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<22);
 8000244:	4b4a      	ldr	r3, [pc, #296]	; (8000370 <main+0x16c>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a49      	ldr	r2, [pc, #292]	; (8000370 <main+0x16c>)
 800024a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<23);
 8000250:	4b47      	ldr	r3, [pc, #284]	; (8000370 <main+0x16c>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a46      	ldr	r2, [pc, #280]	; (8000370 <main+0x16c>)
 8000256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800025a:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR = (1<<0);
 800025c:	4b43      	ldr	r3, [pc, #268]	; (800036c <main+0x168>)
 800025e:	2201      	movs	r2, #1
 8000260:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->PSC = 16;
 8000262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000266:	2210      	movs	r2, #16
 8000268:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2->ARR = total_period;
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = duty_cycle;
 8000272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6353      	str	r3, [r2, #52]	; 0x34

	TIM2->CCER &= ~(1<<1);  	// set output polarity to active high
 800027a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6213      	str	r3, [r2, #32]

	TIM2->CCMR1 &= ~(1<<0);
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(1<<1);
 800029a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a4:	f023 0302 	bic.w	r3, r3, #2
 80002a8:	6193      	str	r3, [r2, #24]

	TIM2->CCMR1 |= (1<<3);    // Enable corresponding Pre-load Register
 80002aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	6193      	str	r3, [r2, #24]

	TIM2->CCMR1 &= ~(1<<4);   // Select PWM Mode1 for Timer2
 80002ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c4:	f023 0310 	bic.w	r3, r3, #16
 80002c8:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<5);
 80002ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<6);
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e8:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= (1<<0);    // Enable Capture Compare
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6213      	str	r3, [r2, #32]
	TIM2->EGR |= (1<<0);     // Set UG-bit, re-initialize the counter
 80002fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6153      	str	r3, [r2, #20]
	TIM2->BDTR |= (1<<15);   // Enable MOE
 800030a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000318:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->CR1 |= (1<<0);     // Start Timer-2
 800031a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]

	while(1){

		static uint8_t direction = 0;

		TIM2->CCR1 = duty_cycle;
 800032a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6353      	str	r3, [r2, #52]	; 0x34

		if(duty_cycle>total_period){
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	dd03      	ble.n	8000342 <main+0x13e>
			direction = 1;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <main+0x170>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	e005      	b.n	800034e <main+0x14a>
		}
		else if(duty_cycle == 100){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b64      	cmp	r3, #100	; 0x64
 8000346:	d102      	bne.n	800034e <main+0x14a>
			direction = 0;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <main+0x170>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
		}

		if(direction == 0){
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <main+0x170>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d103      	bne.n	800035e <main+0x15a>
			duty_cycle = duty_cycle + 10;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	330a      	adds	r3, #10
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	e002      	b.n	8000364 <main+0x160>
		}else{
			duty_cycle = duty_cycle - 10;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3b0a      	subs	r3, #10
 8000362:	607b      	str	r3, [r7, #4]
		}

		delay();
 8000364:	f000 f808 	bl	8000378 <delay>
	while(1){
 8000368:	e7df      	b.n	800032a <main+0x126>
 800036a:	bf00      	nop
 800036c:	40023800 	.word	0x40023800
 8000370:	40020000 	.word	0x40020000
 8000374:	2000001c 	.word	0x2000001c

08000378 <delay>:
	}
}

void delay(){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
	for(int i=0; i<10000;i++){}
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	e002      	b.n	800038a <delay+0x12>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000390:	4293      	cmp	r3, r2
 8000392:	ddf7      	ble.n	8000384 <delay+0xc>
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ff15 	bl	8000204 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	20000020 	.word	0x20000020

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
